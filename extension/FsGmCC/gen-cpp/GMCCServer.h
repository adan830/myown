/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef GMCCServer_H
#define GMCCServer_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "service_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class GMCCServerIf {
 public:
  virtual ~GMCCServerIf() {}

  /**
   * 获取区服信息
   */
  virtual void getAreaInfo( ::AreaInfo& _return) = 0;

  /**
   * 关闭游戏服务器
   * 
   * @param serverId
   */
  virtual bool closeServer(const int32_t serverId) = 0;

  /**
   * 游戏状态变更
   * 
   * @param status
   */
  virtual bool modifyGameStatus(const  ::GameStatus::type status) = 0;

  /**
   * 游戏阶段变更
   * 
   * @param step
   */
  virtual bool modifyGameStep(const  ::GameStep::type step) = 0;

  /**
   * 增加邮件 mailInfo的ID为空
   * 
   * @param mailInfo
   */
  virtual bool addMail(const  ::MailInfo& mailInfo) = 0;

  /**
   * 查询游戏角色信息
   * 
   * @param roleId
   */
  virtual void queryRoleInfo( ::RoleInfo& _return, const int64_t roleId) = 0;

  /**
   * 发送GM命令， 踢掉在线玩家 -- 废弃由GM替代  禁止在线玩家发言 -- 废弃由GM替代
   * 
   * @param commandInfo
   */
  virtual bool sendCommand(const  ::CommandInfo& commandInfo) = 0;

  /**
   * 发送系统通知
   * 
   * @param systemMessage
   */
  virtual bool sendSysNotice(const  ::SystemNotice& systemMessage) = 0;

  /**
   * 同步公告状态
   * 
   * @param noticeId
   */
  virtual void syncNoticeStatus( ::HandleResult& _return, const int64_t noticeId) = 0;

  /**
   * 订单通知
   * 
   * @param order
   */
  virtual void notifyOrder(const  ::Order& order) = 0;

  /**
   * 商品更新
   */
  virtual void notifyGoods() = 0;

  /**
   * 配置更新
   * 
   * @param type
   * @param id
   */
  virtual void notifyConfig(const  ::ConfigType::type type, const int64_t id) = 0;

  /**
   * 商城更新
   * 
   * @param id
   */
  virtual void notifyShop(const std::string& id) = 0;
};

class GMCCServerIfFactory {
 public:
  typedef GMCCServerIf Handler;

  virtual ~GMCCServerIfFactory() {}

  virtual GMCCServerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(GMCCServerIf* /* handler */) = 0;
};

class GMCCServerIfSingletonFactory : virtual public GMCCServerIfFactory {
 public:
  GMCCServerIfSingletonFactory(const boost::shared_ptr<GMCCServerIf>& iface) : iface_(iface) {}
  virtual ~GMCCServerIfSingletonFactory() {}

  virtual GMCCServerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(GMCCServerIf* /* handler */) {}

 protected:
  boost::shared_ptr<GMCCServerIf> iface_;
};

class GMCCServerNull : virtual public GMCCServerIf {
 public:
  virtual ~GMCCServerNull() {}
  void getAreaInfo( ::AreaInfo& /* _return */) {
    return;
  }
  bool closeServer(const int32_t /* serverId */) {
    bool _return = false;
    return _return;
  }
  bool modifyGameStatus(const  ::GameStatus::type /* status */) {
    bool _return = false;
    return _return;
  }
  bool modifyGameStep(const  ::GameStep::type /* step */) {
    bool _return = false;
    return _return;
  }
  bool addMail(const  ::MailInfo& /* mailInfo */) {
    bool _return = false;
    return _return;
  }
  void queryRoleInfo( ::RoleInfo& /* _return */, const int64_t /* roleId */) {
    return;
  }
  bool sendCommand(const  ::CommandInfo& /* commandInfo */) {
    bool _return = false;
    return _return;
  }
  bool sendSysNotice(const  ::SystemNotice& /* systemMessage */) {
    bool _return = false;
    return _return;
  }
  void syncNoticeStatus( ::HandleResult& /* _return */, const int64_t /* noticeId */) {
    return;
  }
  void notifyOrder(const  ::Order& /* order */) {
    return;
  }
  void notifyGoods() {
    return;
  }
  void notifyConfig(const  ::ConfigType::type /* type */, const int64_t /* id */) {
    return;
  }
  void notifyShop(const std::string& /* id */) {
    return;
  }
};


class GMCCServer_getAreaInfo_args {
 public:

  GMCCServer_getAreaInfo_args(const GMCCServer_getAreaInfo_args&);
  GMCCServer_getAreaInfo_args& operator=(const GMCCServer_getAreaInfo_args&);
  GMCCServer_getAreaInfo_args() {
  }

  virtual ~GMCCServer_getAreaInfo_args() throw();

  bool operator == (const GMCCServer_getAreaInfo_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GMCCServer_getAreaInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GMCCServer_getAreaInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GMCCServer_getAreaInfo_pargs {
 public:


  virtual ~GMCCServer_getAreaInfo_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GMCCServer_getAreaInfo_result__isset {
  _GMCCServer_getAreaInfo_result__isset() : success(false) {}
  bool success :1;
} _GMCCServer_getAreaInfo_result__isset;

class GMCCServer_getAreaInfo_result {
 public:

  GMCCServer_getAreaInfo_result(const GMCCServer_getAreaInfo_result&);
  GMCCServer_getAreaInfo_result& operator=(const GMCCServer_getAreaInfo_result&);
  GMCCServer_getAreaInfo_result() {
  }

  virtual ~GMCCServer_getAreaInfo_result() throw();
   ::AreaInfo success;

  _GMCCServer_getAreaInfo_result__isset __isset;

  void __set_success(const  ::AreaInfo& val);

  bool operator == (const GMCCServer_getAreaInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GMCCServer_getAreaInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GMCCServer_getAreaInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GMCCServer_getAreaInfo_presult__isset {
  _GMCCServer_getAreaInfo_presult__isset() : success(false) {}
  bool success :1;
} _GMCCServer_getAreaInfo_presult__isset;

class GMCCServer_getAreaInfo_presult {
 public:


  virtual ~GMCCServer_getAreaInfo_presult() throw();
   ::AreaInfo* success;

  _GMCCServer_getAreaInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GMCCServer_closeServer_args__isset {
  _GMCCServer_closeServer_args__isset() : serverId(false) {}
  bool serverId :1;
} _GMCCServer_closeServer_args__isset;

class GMCCServer_closeServer_args {
 public:

  GMCCServer_closeServer_args(const GMCCServer_closeServer_args&);
  GMCCServer_closeServer_args& operator=(const GMCCServer_closeServer_args&);
  GMCCServer_closeServer_args() : serverId(0) {
  }

  virtual ~GMCCServer_closeServer_args() throw();
  int32_t serverId;

  _GMCCServer_closeServer_args__isset __isset;

  void __set_serverId(const int32_t val);

  bool operator == (const GMCCServer_closeServer_args & rhs) const
  {
    if (!(serverId == rhs.serverId))
      return false;
    return true;
  }
  bool operator != (const GMCCServer_closeServer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GMCCServer_closeServer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GMCCServer_closeServer_pargs {
 public:


  virtual ~GMCCServer_closeServer_pargs() throw();
  const int32_t* serverId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GMCCServer_closeServer_result__isset {
  _GMCCServer_closeServer_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _GMCCServer_closeServer_result__isset;

class GMCCServer_closeServer_result {
 public:

  GMCCServer_closeServer_result(const GMCCServer_closeServer_result&);
  GMCCServer_closeServer_result& operator=(const GMCCServer_closeServer_result&);
  GMCCServer_closeServer_result() : success(0) {
  }

  virtual ~GMCCServer_closeServer_result() throw();
  bool success;
   ::InvalidOperationException ouch;

  _GMCCServer_closeServer_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const  ::InvalidOperationException& val);

  bool operator == (const GMCCServer_closeServer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const GMCCServer_closeServer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GMCCServer_closeServer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GMCCServer_closeServer_presult__isset {
  _GMCCServer_closeServer_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _GMCCServer_closeServer_presult__isset;

class GMCCServer_closeServer_presult {
 public:


  virtual ~GMCCServer_closeServer_presult() throw();
  bool* success;
   ::InvalidOperationException ouch;

  _GMCCServer_closeServer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GMCCServer_modifyGameStatus_args__isset {
  _GMCCServer_modifyGameStatus_args__isset() : status(false) {}
  bool status :1;
} _GMCCServer_modifyGameStatus_args__isset;

class GMCCServer_modifyGameStatus_args {
 public:

  GMCCServer_modifyGameStatus_args(const GMCCServer_modifyGameStatus_args&);
  GMCCServer_modifyGameStatus_args& operator=(const GMCCServer_modifyGameStatus_args&);
  GMCCServer_modifyGameStatus_args() : status(( ::GameStatus::type)0) {
  }

  virtual ~GMCCServer_modifyGameStatus_args() throw();
   ::GameStatus::type status;

  _GMCCServer_modifyGameStatus_args__isset __isset;

  void __set_status(const  ::GameStatus::type val);

  bool operator == (const GMCCServer_modifyGameStatus_args & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const GMCCServer_modifyGameStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GMCCServer_modifyGameStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GMCCServer_modifyGameStatus_pargs {
 public:


  virtual ~GMCCServer_modifyGameStatus_pargs() throw();
  const  ::GameStatus::type* status;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GMCCServer_modifyGameStatus_result__isset {
  _GMCCServer_modifyGameStatus_result__isset() : success(false) {}
  bool success :1;
} _GMCCServer_modifyGameStatus_result__isset;

class GMCCServer_modifyGameStatus_result {
 public:

  GMCCServer_modifyGameStatus_result(const GMCCServer_modifyGameStatus_result&);
  GMCCServer_modifyGameStatus_result& operator=(const GMCCServer_modifyGameStatus_result&);
  GMCCServer_modifyGameStatus_result() : success(0) {
  }

  virtual ~GMCCServer_modifyGameStatus_result() throw();
  bool success;

  _GMCCServer_modifyGameStatus_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const GMCCServer_modifyGameStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GMCCServer_modifyGameStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GMCCServer_modifyGameStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GMCCServer_modifyGameStatus_presult__isset {
  _GMCCServer_modifyGameStatus_presult__isset() : success(false) {}
  bool success :1;
} _GMCCServer_modifyGameStatus_presult__isset;

class GMCCServer_modifyGameStatus_presult {
 public:


  virtual ~GMCCServer_modifyGameStatus_presult() throw();
  bool* success;

  _GMCCServer_modifyGameStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GMCCServer_modifyGameStep_args__isset {
  _GMCCServer_modifyGameStep_args__isset() : step(false) {}
  bool step :1;
} _GMCCServer_modifyGameStep_args__isset;

class GMCCServer_modifyGameStep_args {
 public:

  GMCCServer_modifyGameStep_args(const GMCCServer_modifyGameStep_args&);
  GMCCServer_modifyGameStep_args& operator=(const GMCCServer_modifyGameStep_args&);
  GMCCServer_modifyGameStep_args() : step(( ::GameStep::type)0) {
  }

  virtual ~GMCCServer_modifyGameStep_args() throw();
   ::GameStep::type step;

  _GMCCServer_modifyGameStep_args__isset __isset;

  void __set_step(const  ::GameStep::type val);

  bool operator == (const GMCCServer_modifyGameStep_args & rhs) const
  {
    if (!(step == rhs.step))
      return false;
    return true;
  }
  bool operator != (const GMCCServer_modifyGameStep_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GMCCServer_modifyGameStep_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GMCCServer_modifyGameStep_pargs {
 public:


  virtual ~GMCCServer_modifyGameStep_pargs() throw();
  const  ::GameStep::type* step;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GMCCServer_modifyGameStep_result__isset {
  _GMCCServer_modifyGameStep_result__isset() : success(false) {}
  bool success :1;
} _GMCCServer_modifyGameStep_result__isset;

class GMCCServer_modifyGameStep_result {
 public:

  GMCCServer_modifyGameStep_result(const GMCCServer_modifyGameStep_result&);
  GMCCServer_modifyGameStep_result& operator=(const GMCCServer_modifyGameStep_result&);
  GMCCServer_modifyGameStep_result() : success(0) {
  }

  virtual ~GMCCServer_modifyGameStep_result() throw();
  bool success;

  _GMCCServer_modifyGameStep_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const GMCCServer_modifyGameStep_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GMCCServer_modifyGameStep_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GMCCServer_modifyGameStep_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GMCCServer_modifyGameStep_presult__isset {
  _GMCCServer_modifyGameStep_presult__isset() : success(false) {}
  bool success :1;
} _GMCCServer_modifyGameStep_presult__isset;

class GMCCServer_modifyGameStep_presult {
 public:


  virtual ~GMCCServer_modifyGameStep_presult() throw();
  bool* success;

  _GMCCServer_modifyGameStep_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GMCCServer_addMail_args__isset {
  _GMCCServer_addMail_args__isset() : mailInfo(false) {}
  bool mailInfo :1;
} _GMCCServer_addMail_args__isset;

class GMCCServer_addMail_args {
 public:

  GMCCServer_addMail_args(const GMCCServer_addMail_args&);
  GMCCServer_addMail_args& operator=(const GMCCServer_addMail_args&);
  GMCCServer_addMail_args() {
  }

  virtual ~GMCCServer_addMail_args() throw();
   ::MailInfo mailInfo;

  _GMCCServer_addMail_args__isset __isset;

  void __set_mailInfo(const  ::MailInfo& val);

  bool operator == (const GMCCServer_addMail_args & rhs) const
  {
    if (!(mailInfo == rhs.mailInfo))
      return false;
    return true;
  }
  bool operator != (const GMCCServer_addMail_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GMCCServer_addMail_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GMCCServer_addMail_pargs {
 public:


  virtual ~GMCCServer_addMail_pargs() throw();
  const  ::MailInfo* mailInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GMCCServer_addMail_result__isset {
  _GMCCServer_addMail_result__isset() : success(false) {}
  bool success :1;
} _GMCCServer_addMail_result__isset;

class GMCCServer_addMail_result {
 public:

  GMCCServer_addMail_result(const GMCCServer_addMail_result&);
  GMCCServer_addMail_result& operator=(const GMCCServer_addMail_result&);
  GMCCServer_addMail_result() : success(0) {
  }

  virtual ~GMCCServer_addMail_result() throw();
  bool success;

  _GMCCServer_addMail_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const GMCCServer_addMail_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GMCCServer_addMail_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GMCCServer_addMail_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GMCCServer_addMail_presult__isset {
  _GMCCServer_addMail_presult__isset() : success(false) {}
  bool success :1;
} _GMCCServer_addMail_presult__isset;

class GMCCServer_addMail_presult {
 public:


  virtual ~GMCCServer_addMail_presult() throw();
  bool* success;

  _GMCCServer_addMail_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GMCCServer_queryRoleInfo_args__isset {
  _GMCCServer_queryRoleInfo_args__isset() : roleId(false) {}
  bool roleId :1;
} _GMCCServer_queryRoleInfo_args__isset;

class GMCCServer_queryRoleInfo_args {
 public:

  GMCCServer_queryRoleInfo_args(const GMCCServer_queryRoleInfo_args&);
  GMCCServer_queryRoleInfo_args& operator=(const GMCCServer_queryRoleInfo_args&);
  GMCCServer_queryRoleInfo_args() : roleId(0) {
  }

  virtual ~GMCCServer_queryRoleInfo_args() throw();
  int64_t roleId;

  _GMCCServer_queryRoleInfo_args__isset __isset;

  void __set_roleId(const int64_t val);

  bool operator == (const GMCCServer_queryRoleInfo_args & rhs) const
  {
    if (!(roleId == rhs.roleId))
      return false;
    return true;
  }
  bool operator != (const GMCCServer_queryRoleInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GMCCServer_queryRoleInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GMCCServer_queryRoleInfo_pargs {
 public:


  virtual ~GMCCServer_queryRoleInfo_pargs() throw();
  const int64_t* roleId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GMCCServer_queryRoleInfo_result__isset {
  _GMCCServer_queryRoleInfo_result__isset() : success(false) {}
  bool success :1;
} _GMCCServer_queryRoleInfo_result__isset;

class GMCCServer_queryRoleInfo_result {
 public:

  GMCCServer_queryRoleInfo_result(const GMCCServer_queryRoleInfo_result&);
  GMCCServer_queryRoleInfo_result& operator=(const GMCCServer_queryRoleInfo_result&);
  GMCCServer_queryRoleInfo_result() {
  }

  virtual ~GMCCServer_queryRoleInfo_result() throw();
   ::RoleInfo success;

  _GMCCServer_queryRoleInfo_result__isset __isset;

  void __set_success(const  ::RoleInfo& val);

  bool operator == (const GMCCServer_queryRoleInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GMCCServer_queryRoleInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GMCCServer_queryRoleInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GMCCServer_queryRoleInfo_presult__isset {
  _GMCCServer_queryRoleInfo_presult__isset() : success(false) {}
  bool success :1;
} _GMCCServer_queryRoleInfo_presult__isset;

class GMCCServer_queryRoleInfo_presult {
 public:


  virtual ~GMCCServer_queryRoleInfo_presult() throw();
   ::RoleInfo* success;

  _GMCCServer_queryRoleInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GMCCServer_sendCommand_args__isset {
  _GMCCServer_sendCommand_args__isset() : commandInfo(false) {}
  bool commandInfo :1;
} _GMCCServer_sendCommand_args__isset;

class GMCCServer_sendCommand_args {
 public:

  GMCCServer_sendCommand_args(const GMCCServer_sendCommand_args&);
  GMCCServer_sendCommand_args& operator=(const GMCCServer_sendCommand_args&);
  GMCCServer_sendCommand_args() {
  }

  virtual ~GMCCServer_sendCommand_args() throw();
   ::CommandInfo commandInfo;

  _GMCCServer_sendCommand_args__isset __isset;

  void __set_commandInfo(const  ::CommandInfo& val);

  bool operator == (const GMCCServer_sendCommand_args & rhs) const
  {
    if (!(commandInfo == rhs.commandInfo))
      return false;
    return true;
  }
  bool operator != (const GMCCServer_sendCommand_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GMCCServer_sendCommand_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GMCCServer_sendCommand_pargs {
 public:


  virtual ~GMCCServer_sendCommand_pargs() throw();
  const  ::CommandInfo* commandInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GMCCServer_sendCommand_result__isset {
  _GMCCServer_sendCommand_result__isset() : success(false) {}
  bool success :1;
} _GMCCServer_sendCommand_result__isset;

class GMCCServer_sendCommand_result {
 public:

  GMCCServer_sendCommand_result(const GMCCServer_sendCommand_result&);
  GMCCServer_sendCommand_result& operator=(const GMCCServer_sendCommand_result&);
  GMCCServer_sendCommand_result() : success(0) {
  }

  virtual ~GMCCServer_sendCommand_result() throw();
  bool success;

  _GMCCServer_sendCommand_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const GMCCServer_sendCommand_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GMCCServer_sendCommand_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GMCCServer_sendCommand_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GMCCServer_sendCommand_presult__isset {
  _GMCCServer_sendCommand_presult__isset() : success(false) {}
  bool success :1;
} _GMCCServer_sendCommand_presult__isset;

class GMCCServer_sendCommand_presult {
 public:


  virtual ~GMCCServer_sendCommand_presult() throw();
  bool* success;

  _GMCCServer_sendCommand_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GMCCServer_sendSysNotice_args__isset {
  _GMCCServer_sendSysNotice_args__isset() : systemMessage(false) {}
  bool systemMessage :1;
} _GMCCServer_sendSysNotice_args__isset;

class GMCCServer_sendSysNotice_args {
 public:

  GMCCServer_sendSysNotice_args(const GMCCServer_sendSysNotice_args&);
  GMCCServer_sendSysNotice_args& operator=(const GMCCServer_sendSysNotice_args&);
  GMCCServer_sendSysNotice_args() {
  }

  virtual ~GMCCServer_sendSysNotice_args() throw();
   ::SystemNotice systemMessage;

  _GMCCServer_sendSysNotice_args__isset __isset;

  void __set_systemMessage(const  ::SystemNotice& val);

  bool operator == (const GMCCServer_sendSysNotice_args & rhs) const
  {
    if (!(systemMessage == rhs.systemMessage))
      return false;
    return true;
  }
  bool operator != (const GMCCServer_sendSysNotice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GMCCServer_sendSysNotice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GMCCServer_sendSysNotice_pargs {
 public:


  virtual ~GMCCServer_sendSysNotice_pargs() throw();
  const  ::SystemNotice* systemMessage;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GMCCServer_sendSysNotice_result__isset {
  _GMCCServer_sendSysNotice_result__isset() : success(false) {}
  bool success :1;
} _GMCCServer_sendSysNotice_result__isset;

class GMCCServer_sendSysNotice_result {
 public:

  GMCCServer_sendSysNotice_result(const GMCCServer_sendSysNotice_result&);
  GMCCServer_sendSysNotice_result& operator=(const GMCCServer_sendSysNotice_result&);
  GMCCServer_sendSysNotice_result() : success(0) {
  }

  virtual ~GMCCServer_sendSysNotice_result() throw();
  bool success;

  _GMCCServer_sendSysNotice_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const GMCCServer_sendSysNotice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GMCCServer_sendSysNotice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GMCCServer_sendSysNotice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GMCCServer_sendSysNotice_presult__isset {
  _GMCCServer_sendSysNotice_presult__isset() : success(false) {}
  bool success :1;
} _GMCCServer_sendSysNotice_presult__isset;

class GMCCServer_sendSysNotice_presult {
 public:


  virtual ~GMCCServer_sendSysNotice_presult() throw();
  bool* success;

  _GMCCServer_sendSysNotice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GMCCServer_syncNoticeStatus_args__isset {
  _GMCCServer_syncNoticeStatus_args__isset() : noticeId(false) {}
  bool noticeId :1;
} _GMCCServer_syncNoticeStatus_args__isset;

class GMCCServer_syncNoticeStatus_args {
 public:

  GMCCServer_syncNoticeStatus_args(const GMCCServer_syncNoticeStatus_args&);
  GMCCServer_syncNoticeStatus_args& operator=(const GMCCServer_syncNoticeStatus_args&);
  GMCCServer_syncNoticeStatus_args() : noticeId(0) {
  }

  virtual ~GMCCServer_syncNoticeStatus_args() throw();
  int64_t noticeId;

  _GMCCServer_syncNoticeStatus_args__isset __isset;

  void __set_noticeId(const int64_t val);

  bool operator == (const GMCCServer_syncNoticeStatus_args & rhs) const
  {
    if (!(noticeId == rhs.noticeId))
      return false;
    return true;
  }
  bool operator != (const GMCCServer_syncNoticeStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GMCCServer_syncNoticeStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GMCCServer_syncNoticeStatus_pargs {
 public:


  virtual ~GMCCServer_syncNoticeStatus_pargs() throw();
  const int64_t* noticeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GMCCServer_syncNoticeStatus_result__isset {
  _GMCCServer_syncNoticeStatus_result__isset() : success(false) {}
  bool success :1;
} _GMCCServer_syncNoticeStatus_result__isset;

class GMCCServer_syncNoticeStatus_result {
 public:

  GMCCServer_syncNoticeStatus_result(const GMCCServer_syncNoticeStatus_result&);
  GMCCServer_syncNoticeStatus_result& operator=(const GMCCServer_syncNoticeStatus_result&);
  GMCCServer_syncNoticeStatus_result() {
  }

  virtual ~GMCCServer_syncNoticeStatus_result() throw();
   ::HandleResult success;

  _GMCCServer_syncNoticeStatus_result__isset __isset;

  void __set_success(const  ::HandleResult& val);

  bool operator == (const GMCCServer_syncNoticeStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GMCCServer_syncNoticeStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GMCCServer_syncNoticeStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GMCCServer_syncNoticeStatus_presult__isset {
  _GMCCServer_syncNoticeStatus_presult__isset() : success(false) {}
  bool success :1;
} _GMCCServer_syncNoticeStatus_presult__isset;

class GMCCServer_syncNoticeStatus_presult {
 public:


  virtual ~GMCCServer_syncNoticeStatus_presult() throw();
   ::HandleResult* success;

  _GMCCServer_syncNoticeStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GMCCServer_notifyOrder_args__isset {
  _GMCCServer_notifyOrder_args__isset() : order(false) {}
  bool order :1;
} _GMCCServer_notifyOrder_args__isset;

class GMCCServer_notifyOrder_args {
 public:

  GMCCServer_notifyOrder_args(const GMCCServer_notifyOrder_args&);
  GMCCServer_notifyOrder_args& operator=(const GMCCServer_notifyOrder_args&);
  GMCCServer_notifyOrder_args() {
  }

  virtual ~GMCCServer_notifyOrder_args() throw();
   ::Order order;

  _GMCCServer_notifyOrder_args__isset __isset;

  void __set_order(const  ::Order& val);

  bool operator == (const GMCCServer_notifyOrder_args & rhs) const
  {
    if (!(order == rhs.order))
      return false;
    return true;
  }
  bool operator != (const GMCCServer_notifyOrder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GMCCServer_notifyOrder_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GMCCServer_notifyOrder_pargs {
 public:


  virtual ~GMCCServer_notifyOrder_pargs() throw();
  const  ::Order* order;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GMCCServer_notifyOrder_result {
 public:

  GMCCServer_notifyOrder_result(const GMCCServer_notifyOrder_result&);
  GMCCServer_notifyOrder_result& operator=(const GMCCServer_notifyOrder_result&);
  GMCCServer_notifyOrder_result() {
  }

  virtual ~GMCCServer_notifyOrder_result() throw();

  bool operator == (const GMCCServer_notifyOrder_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GMCCServer_notifyOrder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GMCCServer_notifyOrder_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GMCCServer_notifyOrder_presult {
 public:


  virtual ~GMCCServer_notifyOrder_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class GMCCServer_notifyGoods_args {
 public:

  GMCCServer_notifyGoods_args(const GMCCServer_notifyGoods_args&);
  GMCCServer_notifyGoods_args& operator=(const GMCCServer_notifyGoods_args&);
  GMCCServer_notifyGoods_args() {
  }

  virtual ~GMCCServer_notifyGoods_args() throw();

  bool operator == (const GMCCServer_notifyGoods_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GMCCServer_notifyGoods_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GMCCServer_notifyGoods_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GMCCServer_notifyGoods_pargs {
 public:


  virtual ~GMCCServer_notifyGoods_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GMCCServer_notifyGoods_result {
 public:

  GMCCServer_notifyGoods_result(const GMCCServer_notifyGoods_result&);
  GMCCServer_notifyGoods_result& operator=(const GMCCServer_notifyGoods_result&);
  GMCCServer_notifyGoods_result() {
  }

  virtual ~GMCCServer_notifyGoods_result() throw();

  bool operator == (const GMCCServer_notifyGoods_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GMCCServer_notifyGoods_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GMCCServer_notifyGoods_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GMCCServer_notifyGoods_presult {
 public:


  virtual ~GMCCServer_notifyGoods_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GMCCServer_notifyConfig_args__isset {
  _GMCCServer_notifyConfig_args__isset() : type(false), id(false) {}
  bool type :1;
  bool id :1;
} _GMCCServer_notifyConfig_args__isset;

class GMCCServer_notifyConfig_args {
 public:

  GMCCServer_notifyConfig_args(const GMCCServer_notifyConfig_args&);
  GMCCServer_notifyConfig_args& operator=(const GMCCServer_notifyConfig_args&);
  GMCCServer_notifyConfig_args() : type(( ::ConfigType::type)0), id(0) {
  }

  virtual ~GMCCServer_notifyConfig_args() throw();
   ::ConfigType::type type;
  int64_t id;

  _GMCCServer_notifyConfig_args__isset __isset;

  void __set_type(const  ::ConfigType::type val);

  void __set_id(const int64_t val);

  bool operator == (const GMCCServer_notifyConfig_args & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const GMCCServer_notifyConfig_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GMCCServer_notifyConfig_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GMCCServer_notifyConfig_pargs {
 public:


  virtual ~GMCCServer_notifyConfig_pargs() throw();
  const  ::ConfigType::type* type;
  const int64_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GMCCServer_notifyConfig_result {
 public:

  GMCCServer_notifyConfig_result(const GMCCServer_notifyConfig_result&);
  GMCCServer_notifyConfig_result& operator=(const GMCCServer_notifyConfig_result&);
  GMCCServer_notifyConfig_result() {
  }

  virtual ~GMCCServer_notifyConfig_result() throw();

  bool operator == (const GMCCServer_notifyConfig_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GMCCServer_notifyConfig_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GMCCServer_notifyConfig_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GMCCServer_notifyConfig_presult {
 public:


  virtual ~GMCCServer_notifyConfig_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GMCCServer_notifyShop_args__isset {
  _GMCCServer_notifyShop_args__isset() : id(false) {}
  bool id :1;
} _GMCCServer_notifyShop_args__isset;

class GMCCServer_notifyShop_args {
 public:

  GMCCServer_notifyShop_args(const GMCCServer_notifyShop_args&);
  GMCCServer_notifyShop_args& operator=(const GMCCServer_notifyShop_args&);
  GMCCServer_notifyShop_args() : id() {
  }

  virtual ~GMCCServer_notifyShop_args() throw();
  std::string id;

  _GMCCServer_notifyShop_args__isset __isset;

  void __set_id(const std::string& val);

  bool operator == (const GMCCServer_notifyShop_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const GMCCServer_notifyShop_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GMCCServer_notifyShop_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GMCCServer_notifyShop_pargs {
 public:


  virtual ~GMCCServer_notifyShop_pargs() throw();
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GMCCServer_notifyShop_result {
 public:

  GMCCServer_notifyShop_result(const GMCCServer_notifyShop_result&);
  GMCCServer_notifyShop_result& operator=(const GMCCServer_notifyShop_result&);
  GMCCServer_notifyShop_result() {
  }

  virtual ~GMCCServer_notifyShop_result() throw();

  bool operator == (const GMCCServer_notifyShop_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GMCCServer_notifyShop_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GMCCServer_notifyShop_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GMCCServer_notifyShop_presult {
 public:


  virtual ~GMCCServer_notifyShop_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class GMCCServerClient : virtual public GMCCServerIf {
 public:
  GMCCServerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  GMCCServerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getAreaInfo( ::AreaInfo& _return);
  void send_getAreaInfo();
  void recv_getAreaInfo( ::AreaInfo& _return);
  bool closeServer(const int32_t serverId);
  void send_closeServer(const int32_t serverId);
  bool recv_closeServer();
  bool modifyGameStatus(const  ::GameStatus::type status);
  void send_modifyGameStatus(const  ::GameStatus::type status);
  bool recv_modifyGameStatus();
  bool modifyGameStep(const  ::GameStep::type step);
  void send_modifyGameStep(const  ::GameStep::type step);
  bool recv_modifyGameStep();
  bool addMail(const  ::MailInfo& mailInfo);
  void send_addMail(const  ::MailInfo& mailInfo);
  bool recv_addMail();
  void queryRoleInfo( ::RoleInfo& _return, const int64_t roleId);
  void send_queryRoleInfo(const int64_t roleId);
  void recv_queryRoleInfo( ::RoleInfo& _return);
  bool sendCommand(const  ::CommandInfo& commandInfo);
  void send_sendCommand(const  ::CommandInfo& commandInfo);
  bool recv_sendCommand();
  bool sendSysNotice(const  ::SystemNotice& systemMessage);
  void send_sendSysNotice(const  ::SystemNotice& systemMessage);
  bool recv_sendSysNotice();
  void syncNoticeStatus( ::HandleResult& _return, const int64_t noticeId);
  void send_syncNoticeStatus(const int64_t noticeId);
  void recv_syncNoticeStatus( ::HandleResult& _return);
  void notifyOrder(const  ::Order& order);
  void send_notifyOrder(const  ::Order& order);
  void recv_notifyOrder();
  void notifyGoods();
  void send_notifyGoods();
  void recv_notifyGoods();
  void notifyConfig(const  ::ConfigType::type type, const int64_t id);
  void send_notifyConfig(const  ::ConfigType::type type, const int64_t id);
  void recv_notifyConfig();
  void notifyShop(const std::string& id);
  void send_notifyShop(const std::string& id);
  void recv_notifyShop();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class GMCCServerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<GMCCServerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (GMCCServerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getAreaInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_closeServer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_modifyGameStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_modifyGameStep(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addMail(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryRoleInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendCommand(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendSysNotice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_syncNoticeStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_notifyOrder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_notifyGoods(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_notifyConfig(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_notifyShop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  GMCCServerProcessor(boost::shared_ptr<GMCCServerIf> iface) :
    iface_(iface) {
    processMap_["getAreaInfo"] = &GMCCServerProcessor::process_getAreaInfo;
    processMap_["closeServer"] = &GMCCServerProcessor::process_closeServer;
    processMap_["modifyGameStatus"] = &GMCCServerProcessor::process_modifyGameStatus;
    processMap_["modifyGameStep"] = &GMCCServerProcessor::process_modifyGameStep;
    processMap_["addMail"] = &GMCCServerProcessor::process_addMail;
    processMap_["queryRoleInfo"] = &GMCCServerProcessor::process_queryRoleInfo;
    processMap_["sendCommand"] = &GMCCServerProcessor::process_sendCommand;
    processMap_["sendSysNotice"] = &GMCCServerProcessor::process_sendSysNotice;
    processMap_["syncNoticeStatus"] = &GMCCServerProcessor::process_syncNoticeStatus;
    processMap_["notifyOrder"] = &GMCCServerProcessor::process_notifyOrder;
    processMap_["notifyGoods"] = &GMCCServerProcessor::process_notifyGoods;
    processMap_["notifyConfig"] = &GMCCServerProcessor::process_notifyConfig;
    processMap_["notifyShop"] = &GMCCServerProcessor::process_notifyShop;
  }

  virtual ~GMCCServerProcessor() {}
};

class GMCCServerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  GMCCServerProcessorFactory(const ::boost::shared_ptr< GMCCServerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< GMCCServerIfFactory > handlerFactory_;
};

class GMCCServerMultiface : virtual public GMCCServerIf {
 public:
  GMCCServerMultiface(std::vector<boost::shared_ptr<GMCCServerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~GMCCServerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<GMCCServerIf> > ifaces_;
  GMCCServerMultiface() {}
  void add(boost::shared_ptr<GMCCServerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getAreaInfo( ::AreaInfo& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAreaInfo(_return);
    }
    ifaces_[i]->getAreaInfo(_return);
    return;
  }

  bool closeServer(const int32_t serverId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->closeServer(serverId);
    }
    return ifaces_[i]->closeServer(serverId);
  }

  bool modifyGameStatus(const  ::GameStatus::type status) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->modifyGameStatus(status);
    }
    return ifaces_[i]->modifyGameStatus(status);
  }

  bool modifyGameStep(const  ::GameStep::type step) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->modifyGameStep(step);
    }
    return ifaces_[i]->modifyGameStep(step);
  }

  bool addMail(const  ::MailInfo& mailInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addMail(mailInfo);
    }
    return ifaces_[i]->addMail(mailInfo);
  }

  void queryRoleInfo( ::RoleInfo& _return, const int64_t roleId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryRoleInfo(_return, roleId);
    }
    ifaces_[i]->queryRoleInfo(_return, roleId);
    return;
  }

  bool sendCommand(const  ::CommandInfo& commandInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendCommand(commandInfo);
    }
    return ifaces_[i]->sendCommand(commandInfo);
  }

  bool sendSysNotice(const  ::SystemNotice& systemMessage) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendSysNotice(systemMessage);
    }
    return ifaces_[i]->sendSysNotice(systemMessage);
  }

  void syncNoticeStatus( ::HandleResult& _return, const int64_t noticeId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->syncNoticeStatus(_return, noticeId);
    }
    ifaces_[i]->syncNoticeStatus(_return, noticeId);
    return;
  }

  void notifyOrder(const  ::Order& order) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->notifyOrder(order);
    }
    ifaces_[i]->notifyOrder(order);
  }

  void notifyGoods() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->notifyGoods();
    }
    ifaces_[i]->notifyGoods();
  }

  void notifyConfig(const  ::ConfigType::type type, const int64_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->notifyConfig(type, id);
    }
    ifaces_[i]->notifyConfig(type, id);
  }

  void notifyShop(const std::string& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->notifyShop(id);
    }
    ifaces_[i]->notifyShop(id);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class GMCCServerConcurrentClient : virtual public GMCCServerIf {
 public:
  GMCCServerConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  GMCCServerConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getAreaInfo( ::AreaInfo& _return);
  int32_t send_getAreaInfo();
  void recv_getAreaInfo( ::AreaInfo& _return, const int32_t seqid);
  bool closeServer(const int32_t serverId);
  int32_t send_closeServer(const int32_t serverId);
  bool recv_closeServer(const int32_t seqid);
  bool modifyGameStatus(const  ::GameStatus::type status);
  int32_t send_modifyGameStatus(const  ::GameStatus::type status);
  bool recv_modifyGameStatus(const int32_t seqid);
  bool modifyGameStep(const  ::GameStep::type step);
  int32_t send_modifyGameStep(const  ::GameStep::type step);
  bool recv_modifyGameStep(const int32_t seqid);
  bool addMail(const  ::MailInfo& mailInfo);
  int32_t send_addMail(const  ::MailInfo& mailInfo);
  bool recv_addMail(const int32_t seqid);
  void queryRoleInfo( ::RoleInfo& _return, const int64_t roleId);
  int32_t send_queryRoleInfo(const int64_t roleId);
  void recv_queryRoleInfo( ::RoleInfo& _return, const int32_t seqid);
  bool sendCommand(const  ::CommandInfo& commandInfo);
  int32_t send_sendCommand(const  ::CommandInfo& commandInfo);
  bool recv_sendCommand(const int32_t seqid);
  bool sendSysNotice(const  ::SystemNotice& systemMessage);
  int32_t send_sendSysNotice(const  ::SystemNotice& systemMessage);
  bool recv_sendSysNotice(const int32_t seqid);
  void syncNoticeStatus( ::HandleResult& _return, const int64_t noticeId);
  int32_t send_syncNoticeStatus(const int64_t noticeId);
  void recv_syncNoticeStatus( ::HandleResult& _return, const int32_t seqid);
  void notifyOrder(const  ::Order& order);
  int32_t send_notifyOrder(const  ::Order& order);
  void recv_notifyOrder(const int32_t seqid);
  void notifyGoods();
  int32_t send_notifyGoods();
  void recv_notifyGoods(const int32_t seqid);
  void notifyConfig(const  ::ConfigType::type type, const int64_t id);
  int32_t send_notifyConfig(const  ::ConfigType::type type, const int64_t id);
  void recv_notifyConfig(const int32_t seqid);
  void notifyShop(const std::string& id);
  int32_t send_notifyShop(const std::string& id);
  void recv_notifyShop(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
