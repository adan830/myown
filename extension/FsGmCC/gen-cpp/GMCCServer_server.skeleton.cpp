// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "GMCCServer.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class GMCCServerHandler : virtual public GMCCServerIf {
 public:
  GMCCServerHandler() {
    // Your initialization goes here
  }

  /**
   * 获取区服信息
   */
  void getAreaInfo( ::AreaInfo& _return) {
    // Your implementation goes here
    printf("getAreaInfo\n");
  }

  /**
   * 关闭游戏服务器
   * 
   * @param serverId
   */
  bool closeServer(const int32_t serverId) {
    // Your implementation goes here
    printf("closeServer\n");
  }

  /**
   * 游戏状态变更
   * 
   * @param status
   */
  bool modifyGameStatus(const  ::GameStatus::type status) {
    // Your implementation goes here
    printf("modifyGameStatus\n");
  }

  /**
   * 游戏阶段变更
   * 
   * @param step
   */
  bool modifyGameStep(const  ::GameStep::type step) {
    // Your implementation goes here
    printf("modifyGameStep\n");
  }

  /**
   * 增加邮件 mailInfo的ID为空
   * 
   * @param mailInfo
   */
  bool addMail(const  ::MailInfo& mailInfo) {
    // Your implementation goes here
    printf("addMail\n");
  }

  /**
   * 查询游戏角色信息
   * 
   * @param roleId
   */
  void queryRoleInfo( ::RoleInfo& _return, const int64_t roleId) {
    // Your implementation goes here
    printf("queryRoleInfo\n");
  }

  /**
   * 发送GM命令， 踢掉在线玩家 -- 废弃由GM替代  禁止在线玩家发言 -- 废弃由GM替代
   * 
   * @param commandInfo
   */
  bool sendCommand(const  ::CommandInfo& commandInfo) {
    // Your implementation goes here
    printf("sendCommand\n");
  }

  /**
   * 发送系统通知
   * 
   * @param systemMessage
   */
  bool sendSysNotice(const  ::SystemNotice& systemMessage) {
    // Your implementation goes here
    printf("sendSysNotice\n");
  }

  /**
   * 同步公告状态
   * 
   * @param noticeId
   */
  void syncNoticeStatus( ::HandleResult& _return, const int64_t noticeId) {
    // Your implementation goes here
    printf("syncNoticeStatus\n");
  }

  /**
   * 订单通知
   * 
   * @param order
   */
  void notifyOrder(const  ::Order& order) {
    // Your implementation goes here
    printf("notifyOrder\n");
  }

  /**
   * 商品更新
   */
  void notifyGoods() {
    // Your implementation goes here
    printf("notifyGoods\n");
  }

  /**
   * 配置更新
   * 
   * @param type
   * @param id
   */
  void notifyConfig(const  ::ConfigType::type type, const int64_t id) {
    // Your implementation goes here
    printf("notifyConfig\n");
  }

  /**
   * 商城更新
   * 
   * @param id
   */
  void notifyShop(const std::string& id) {
    // Your implementation goes here
    printf("notifyShop\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<GMCCServerHandler> handler(new GMCCServerHandler());
  shared_ptr<TProcessor> processor(new GMCCServerProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

